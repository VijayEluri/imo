/* ************************************************************** *
 *                                                                *
 * Copyright (c) 2005, Kota Mizushima, All rights reserved.       *
 *                                                                *
 *                                                                *
 * This software is distributed under the modified BSD License.   *
 * ************************************************************** */

options {
  STATIC = false;
}

PARSER_BEGIN(IMoParser)
package jp.gr.java_conf.mizu.imo.parser;
import java.util.*;
import jp.gr.java_conf.mizu.imo.Ast;
import static jp.gr.java_conf.mizu.imo.Ast.*;

public class IMoParser {
  /*
   * convenience method to create a Location
   */
  private static Pos p(Token t) {
    return new Pos(t.beginLine, t.beginColumn);
  }

  /*
   * convenience method to create a Location
   */
  private static Pos p(int line, int column) {
    return new Pos(line, column);
  }

  /*
   * convenience method to get image of a Token
   */
  private static String c(Token t) {
    return t.image;
  }

  /*
   * converience method to create a List
   */
  private static List list() {
    return new ArrayList();
  }

  /*
   * converience method to create substring
   */
  private static String sub(String s, int sindex, int eindex) {
    return s.substring(sindex, eindex);
  }

  /*
   * Returns a String which last character of s is omitted.
   */
  private static String chop(String s) {
  	return s.substring(0, s.length() - 1);
  }

  /*
   * Returns a String which first and last character of s is omitted.
   */
  private static String chopEdge(String s) {
    return s.substring(1, s.length() - 1);
  }

  private static char unescapeChar(char c) {
    switch(c){
    case 'n' : return '\n';
    case 't' : return '\t';
    case 'b' : return '\b';
    case 'r' : return '\r';
    case 'f' : return '\f';
    case '\\': return '\\';
    case '\'': return '\'';
    case '"' : return '"';
    default  : return c;
    }
  }

  private static String unescape(String s) {
  	StringBuffer b = new StringBuffer();
  	int len = s.length();
  	for(int i = 0; i < len; i++){
      char c = s.charAt(i);
      if(c != '\\'){
        b.append(c);
        continue;
      }
      i++;
      b.append(unescapeChar(s.charAt(i)));
  	}
  	return new String(b);
  }
}
PARSER_END(IMoParser)

SKIP:
{
  " "
| "\t"
| "\n"
| "\r"
| "\r\n"
}



/*
 * COMMENTS
 */
SPECIAL_TOKEN:
{
  <LINE_COMMENT:       "//" (~["\r", "\n"])*>
| <SHELL_COMMENT:      "#!" (~["\r", "\n"])*>
}

/*
 * KEYWORDS
 */
TOKEN:
{
  <K_AND:          "and"          >
| <K_BOOLEAN:      "bool"         >
| <K_DEF:          "def"          >
| <K_DO:           "do"           >
| <K_ELSE:         "else"         >
| <K_FALSE:        "false"        >
| <K_IF:           "if"           >
| <K_LET:          "let"          >
| <K_IN:           "in"           >
| <K_IO:           "io"           >
| <K_INT:          "int"          >
| <K_NOT:          "not"          >
| <K_OR:           "or"           >
| <K_RETURN:       "return"       >
| <K_STRING:       "string"       >
| <K_TRUE:         "true"         >
| <K_UNIT:         "unit"         >
}

/*
 * OPERATORS
 */
TOKEN : {
  <PLUS:           "+"            >
| <MINUS:          "-"            >
| <ASTER:          "*"            >
| <SLASH:          "/"            >
| <PERCENT:        "%"            >
| <DOLLAR:         "$"            >
| <LT:             "<"            >
| <GT:             ">"            >
| <LEQ:            "<="           >
| <GEQ:            ">="           >
| <RARROW:         "->"           >
| <LARROW:         "<-"           >
| <BIND:           ">>="          >
| <CONCAT:         ">>"           >
| <ASSIGN:         "="            >
| <EQ:             "=="           >
| <NOTEQ:          "/="           >
| <PLUSPLUS:       "++"           >
| <MINUSMINUS:     "--"           >
| <COLON:          ":"            >
| <SEMI:           ";"            >
| <COLON2:         "::"           >
| <SHARP:          "#"            >
| <DOT:            "."            >
| <LBRACE:         "{"            >
| <RBRACE:         "}"            >
| <LPAREN:         "("            >
| <RPAREN:         ")"            >
| <COMMA:          ","            >
| <LBRACKET:       "["            >
| <RBRACKET:       "]"            >
| <QUESTION:       "?"            >
| <LAMBDA:         "\\"           >
}

/*
 * LITERALS
 */
TOKEN:
{
  <INTEGER:
    <DECIMAL_LITERAL> (["L"])?
  | <HEX_LITERAL> (["L"])?
  | <OCTAL_LITERAL> (["L"])?
  >
| <#DECIMAL_LITERAL: ["1"-"9"] (["0"-"9"])* >
| <#HEX_LITERAL: "0" ["x","X"] (["0"-"9","a"-"f","A"-"F"])+ >
| <#OCTAL_LITERAL: "0" (["0"-"7"])* >
| <CHARACTER:
    "'"
    ( (~["'","\\","\n","\r"])
    | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )
    "'"
  >
| <STRING:
    "\""
    ( (~["\"","\\","\n","\r"])
    | ("\\"
        ( ["n","t","b","r","f","\\","'","\""]
        | ["0"-"7"] ( ["0"-"7"] )?
        | ["0"-"3"] ["0"-"7"] ["0"-"7"]
        )
      )
    )*
    "\""
  >
| <ID: ["a"-"z", "A"-"Z", "_"] (["a"-"z", "A"-"Z", "_", "0"-"9"])* >
}

/*
 * ERROR TOKEN
 */
TOKEN:{
  <ERROR: ~[]>
}

Program program():{Fun fun; List<Fun> funs = new ArrayList<Fun>();}{
  (fun=function() { funs.add(fun); })+ { return new Program(p(1, 1), funs); }
}

Fun function():{
  Token t; Arg arg; List<Arg> args = new ArrayList<Arg>(); 
  Type ty; Exp e;
}{
  "def" t=<ID> "(" (arg=formal_parameter() { args.add(arg); })+  ")" 
  ":" ty=type() "=" e=expression() {
    return new Fun(p(t), sym(t.image), args, ty, e);
  }
}

Type type():{Type ty1, ty2;}{
  ty1=basicType() ["->" ty2=type() { ty1 = Type.fun(ty1, ty2); }] {
    return ty1;
  }
}

Type basicType():{Type ty;}{
  "bool"                 { return Type.BOOL; }
| "int"                  { return Type.INT; }
| "string"               { return Type.STRING; }
| "unit"                 { return Type.UNIT; }
| "io" "(" ty=type() ")" { return Type.io(ty); }
| "(" ty=type() ")"      { return ty; }
}

Arg formal_parameter():{Token t; Type ty;}{
  t=<ID> ":" ty=type() { return new Arg(p(t), sym(t.image), ty); }
}

Exp expression():{Token t; Exp e;}{
  e=let_expression()        { return e; }
| e=if_expression()         { return e; }
| e=bindable()              { return e; }
| e=anonymous_function()    { return e; }
| t="return" e=expression() { return new Return(p(t), e); }
}

Exp anonymous_function():{Token t; Arg arg; Exp e;}{
  t="\\" arg=formal_parameter() "." e=expression() {
    return new AnonFun(p(t), arg, e);
  }
}

Exp bindable():{Token t; Exp a, b;}{
  a=apply() 
  ( t=">>=" b=apply() { a = new Bind(p(t), a, b); }
  | t=">>"  b=apply() { a = new Concat(p(t), a, b); }
  )* { return a; }
}

Exp apply():{Exp f; Exp arg;}{
  f=logical_or() ["$" arg=apply() { f = app(f, arg); }] { return f; }
}

Exp logical_or():{Token t; Exp a, b;}{
  a=logical_and() (t="or" b=logical_and() { a = new Or(p(t), a, b); })* { 
    return a; 
  }
}

Exp logical_and():{ Token t; Exp a, b; }{
  a=equal() (t="and" b=equal() { a = new And(p(t), a, b); })* {
    return a;
  }
}

Exp equal():{Token t; Exp a, b;}{
  a=comparative() (
    t="=="  b=comparative() { a = new Equal(p(t), a, b); }
  | t="/="  b=comparative() { a = new NotEqual(p(t), a, b); }
  )* { return a; }
}

Exp comparative():{Token t; Exp a, b;}{
  a=additive()
  ( t="<=" b=additive() {a = app2(ref(p(t), "<="), a, b);}
  | t=">=" b=additive() {a = app2(ref(p(t), ">="), a, b);}
  | t="<"  b=additive() {a = app2(ref(p(t), "<" ), a, b);}
  | t=">"  b=additive() {a = app2(ref(p(t), ">" ), a, b);}
  )* { return a; }
}

Exp additive() :{Token t; Exp a, b;}{
  a=unary_prefix()
  ( t="+" b=unary_prefix() { a = app2(ref(p(t), "+"), a, b); }
  | t="-" b=unary_prefix() { a = app2(ref(p(t), "-"), a, b); }
  )* { return a; }
}

Exp unary_prefix() :{Token t; Exp e;}{
( t="+"   e=unary_prefix() { e = app(ref(p(t), "u+"),  e); }
| t="-"   e=unary_prefix() { e = app(ref(p(t), "u-"),  e); }
| t="not" e=unary_prefix() { e = app(ref(p(t), "not"), e); }
| e=multitive()
) { return e; }
}

Exp multitive() :{Token t; Exp a, b;}{
  a=primary_suffix()
  ( t="*" b=primary_suffix() { a = app2(ref(p(t), "*"), a, b); }
  | t="/" b=primary_suffix() { a = app2(ref(p(t), "/"), a, b); }
  | t="%" b=primary_suffix() { a = app2(ref(p(t), "%"), a, b); }
  )* {return a;}
}

Exp primary_suffix():{Exp a, b;}{
  a=primary() (b=primary() { a = app(a, b); })* {return a;} 
}

Exp primary():{Token t; Exp e;}{
  t=<ID>                                { return new Ref(p(t), sym(t.image)); }
| e=int_literal()                       { return e; }
| e=string_literal()                    { return e; }
| e=bool_literal()                      { return e; }
| "(" e=expression() ")"                { return e; }
}

Exp int_literal():{Token t;}{
  t=<INTEGER> { return new Int(p(t), Integer.parseInt(t.image)); }
}

Exp string_literal():{Token t;}{
  t=<STRING> { return new Str(p(t), unescape(chopEdge(t.image))); }
}

Exp bool_literal():{Token t;}{
  t="true"  { return new Bool(p(t), true); }
| t="false" { return new Bool(p(t), false); }
}

Def bind():{Token t; Exp e;} {
  t=<ID> "=" e=expression() { return new Def(p(t), sym(t.image), e); }
}

Exp let_expression():{
  Token t; List<Def> defs = new ArrayList<Def>(); Def def = null; Exp e;
}{
  t="let" [ 
    def=bind() { defs.add(def); } ("," def=bind() { defs.add(def); })* 
  ] "in" e=expression() {
    return new Let(p(t), defs, e);
  }
}

Exp if_expression(): {Token t; Exp e1, e2, e3;} {
  t="if" "(" e1=expression() ")" e2=expression() "else" e3=expression() {
    return new If(p(t), e1, e2, e3);
  }
}